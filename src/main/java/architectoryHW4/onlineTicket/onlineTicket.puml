@startuml
' Интерфейсы
' действия пользователя
interface UserActions {
' авторизациия пользователя
  +authorize(username: String, password: String): boolean
' выбор маршрута
  +selectRoute(routeId: String, time: DateTime): boolean
' проверка доступности билета
  +checkTicketAvailability(): boolean
' проверка наличия денежных средств у пользователя
  +checkFunds(): boolean
}

' действия с билетом
interface TicketActions {
' резервирование билета
  +reserveTicket(): boolean
' списание средств
  +deductFunds(): boolean
' подтверждение покупки
  +confirmPurchase(): boolean
' обновление информации о наличии билета
  +updateTicketAvailability(): void
' отмена резервирования
  +cancelReservation(): boolean
}

' Классы и операции
' класс, представляющий пользователя системы.
class User implements UserActions {
' предусловия ----->
  +authorize(username: String, password: String): boolean
  +selectRoute(routeId: String, time: DateTime): boolean
  +checkTicketAvailability(): boolean
  +checkFunds(): boolean
' <------- предусловия
'постусловия ------>
  +reserveTicket(): boolean
  +deductFunds(): boolean
  +confirmPurchase(): boolean
  +updateTicketAvailability(): void
  +cancelReservation(): boolean
'<-------- постусловия
}

' Абстрактный класс и наследование

abstract class Ticket implements TicketActions {
  +routeId: String
  +departureTime: DateTime
  +price: Money
}

User --|> BusTicket : uses

' класс предоставляет информацию о билете на автобус
class BusTicket extends Ticket {

' номер маршрута
  +routeId: String
' время отправления
  +departureTime: DateTime
' стоимость билета
  +price: Money
}

' Предусловия

User --> User : authorize(username, password)
User --> User : selectRoute(routeId, time)
User --> User : checkTicketAvailability()
User --> User : checkFunds()

User --> BusTicket : reserveTicket()

' Постусловия

User --> User : deductFunds()
User --> User : confirmPurchase()
User --> BusTicket : updateTicketAvailability()

User --> User : cancelReservation()

' Инварианты
' сумма средств на счёте больше или равно стоимости билета
User --> User : [invariant] Funds >= busTicket.price
' стоимость билета на автобус больше нуля
BusTicket ---> BusTicket : [invariant] Price > 0
' стоимость билета всегда больше нуля
Ticket ---> Ticket : [invariant] Price > 0
@enduml